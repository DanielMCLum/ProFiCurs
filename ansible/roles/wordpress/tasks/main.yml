# Verifica que la variable del dominio esté definida
- name: Verificar que la variable 'domain_name' está definida
  assert:
    that:
      - domain_name is defined
      - domain_name | length > 0
    fail_msg: >
      XXX ERROR XXX La variable 'domain_name' no está definida o está vacía.
      Asegúrate de establecerla en group_vars/all.yml (ej. domain_name: www.midominio.com).

# ---------------------------------------------------------------------
# Sección: Soporte para EFS (sistema de archivos compartido entre instancias)
# ---------------------------------------------------------------------

- name: Instalar soporte para NFS (requerido por EFS)
  apt:
    name: nfs-common
    state: present
    update_cache: true

- name: Crear directorio de montaje si no existe
  file:
    path: /var/www/html
    state: directory
    mode: '0755'

- name: Montar EFS en /var/www/html
  mount:
    path: /var/www/html
    src: "{{ efs_id }}.efs.{{ aws_region }}.amazonaws.com:/"
    fstype: nfs4
    opts: "nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
    state: mounted

- name: Esperar a que el punto de montaje EFS esté disponible
  wait_for:
    path: /var/www/html
    state: present
    timeout: 60

# ---------------------------------------------------------------------
# Detección de instalación previa en EFS
# ---------------------------------------------------------------------

- name: Comprobar si WordPress ya está instalado
  stat:
    path: /var/www/html/wp-config.php
  register: wp_installed

# ---------------------------------------------------------------------
# Descargar e instalar WordPress SOLO si no está en EFS
# ---------------------------------------------------------------------

- name: Obtener claves SALT únicas
  uri:
    url: https://api.wordpress.org/secret-key/1.1/salt/
    return_content: yes
  register: wp_salts_raw
  when: not wp_installed.stat.exists

- name: Guardar salts en variable
  set_fact:
    wp_salts: "{{ wp_salts_raw.content }}"
  when: not wp_installed.stat.exists

- name: Instalar dependencias necesarias
  apt:
    name:
      - curl
      - unzip
      - php-mysql
      - php-curl
    state: present
    update_cache: true
  when: not wp_installed.stat.exists

- name: Descargar WordPress
  get_url:
    url: https://wordpress.org/latest.tar.gz
    dest: /tmp/wordpress.tar.gz
  when: not wp_installed.stat.exists

- name: Extraer WordPress
  unarchive:
    src: /tmp/wordpress.tar.gz
    dest: /tmp
    remote_src: yes
  when: not wp_installed.stat.exists

- name: Eliminar archivo de bienvenida de Nginx si existe
  file:
    path: /var/www/html/index.nginx-debian.html
    state: absent
  ignore_errors: true
  when: not wp_installed.stat.exists

- name: Copiar WordPress a /var/www/html usando rsync
  ansible.builtin.command:
    cmd: rsync -a /tmp/wordpress/ /var/www/html/
  when: not wp_installed.stat.exists

- name: Establecer permisos en /var/www/html
  file:
    path: /var/www/html
    owner: www-data
    group: www-data
    recurse: yes
  when: not wp_installed.stat.exists

- name: Plantilla de wp-config.php
  template:
    src: wp-config.php.j2
    dest: /var/www/html/wp-config.php
    owner: www-data
    group: www-data
    mode: '0644'
  when: not wp_installed.stat.exists
  notify: Recargar Nginx

# ---------------------------------------------------------------------
# Instalación de WP-CLI (se ejecuta siempre)
# ---------------------------------------------------------------------

- name: Descargar WP-CLI
  get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: /usr/local/bin/wp-cli.phar
    mode: '0755'

- name: Mover WP-CLI a /usr/local/bin/wp
  copy:
    src: /usr/local/bin/wp-cli.phar
    dest: /usr/local/bin/wp
    remote_src: yes
    mode: '0755'
